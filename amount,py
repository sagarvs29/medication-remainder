"""class BankAccount:
    def __init__(self):
        self.balance = 0
        print(f"Current balance is: {self.balance}")

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited: {amount}")

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
            print(f"Withdrawn: {amount}")
        else:
            print("Insufficient funds")

    def get_balance(self):
        return self.balance

# Create an instance of BankAccount
account = BankAccount()

# Deposit amount
deposit_amount = int(input("Enter the deposit amount: "))
account.deposit(deposit_amount)

# Withdraw amount
withdraw_amount = float(input("Enter the withdrawal amount: "))
account.withdraw(withdraw_amount)

# Print the current balance
print(f"Current balance: {account.get_balance()}")"""
class Library:
    def __init__(self):
        self.avail_books = 0
        print(f"Currently available books are: {self.avail_books}")

    def add_books(self, books):
        if books > 0:
            self.avail_books += books
            print(f"Added {books} books. Total available books: {self.avail_books}")
        else:
            print("Cannot add zero or negative books.")

    def borrow_books(self, books):
        if books <= self.avail_books:
            self.avail_books -= books
            print(f"Borrowed {books} books. Remaining books: {self.avail_books}")
        else:
            print("Insufficient books available.")

    def get_avail_books(self):
        return self.avail_books
 #instance
library = Library()

# Add books
new_books = int(input("Enter the number of books to add: "))
library.add_books(new_books)

# Borrow books
borrow_amount = int(input("Enter the number of books to borrow: "))
library.borrow_books(borrow_amount)

# Print  available books
print(f"Currently available books: {library.get_avail_books()}")
